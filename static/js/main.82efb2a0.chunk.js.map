{"version":3,"sources":["Prime.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Prime","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","findPrimes","placeholderArray","Array","parseInt","state","n","fill","printArray","counter","placeholder","numberOfPrimes","tmp","num","push","i","length","indexOf","setState","arr","primes","Printing","map","number","react_default","a","createElement","prevProps","val","forceUpdate","style","headerDiv","height","width","backgroundColor","text","fontSize","color","list","padding","Component","Form","value","event","target","onKeyUp","handleChange","bind","align","type","src_Prime","React","App","gettingInput","newValue","outerDiv","top","left","overflow","innerDiv","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82efb2a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Prime extends Component {\r\n  constructor(props)\r\n  {\r\n    super(props)\r\n    this.state = {\r\n      n: 100,\r\n      arr: [],\r\n      primes: 0\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.findPrimes();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // only update chart if the data has changed\r\n    if (prevProps.val !== this.props.val) {\r\n      this.setState({\r\n        n: this.props.val\r\n      })\r\n      this.findPrimes()\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n  findPrimes = () => {\r\n    let placeholderArray = new Array(parseInt(this.state.n,10) + 1).fill(1);\r\n    let printArray = [];\r\n    placeholderArray[0] = placeholderArray[1] = 0;\r\n    let counter = this.state.n;\r\n    let placeholder = [];\r\n    let numberOfPrimes = 0;\r\n    let tmp = 0;\r\n    let num = 0;\r\n    while(counter > 1){\r\n      placeholder.push(counter);\r\n      --counter;\r\n    }\r\n\r\n    for (let i = 2; i <= placeholderArray.length; (i == 2 ? i++ : i+=2)) {\r\n      tmp = i + i;\r\n      while (tmp <= placeholderArray.length) {\r\n        placeholderArray[tmp] = 0;\r\n        tmp += i;\r\n      }\r\n\r\n      if(placeholderArray[i] == 1)\r\n      {\r\n        printArray[num] = placeholderArray.indexOf(1,i);\r\n        num++;\r\n        numberOfPrimes++;\r\n      }\r\n\r\n    }\r\n\r\n    this.setState({\r\n      arr : printArray,\r\n      primes: numberOfPrimes\r\n    })\r\n  }\r\n\r\n  Printing = () => {\r\n    return this.state.arr.map((number) => <li>{number}</li>)\r\n  }\r\n\r\n\r\n  render() {\r\n    const style = {\r\n      headerDiv : {\r\n        height: 50,\r\n        width: 400,\r\n        backgroundColor: '#AD9'\r\n      },\r\n      text: {\r\n        fontSize: '20px',\r\n        color: 'black'\r\n      },\r\n      list: {\r\n        padding: '80px'\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <div style={style.headerDiv}>\r\n          <p style={style.text}>Number of primes: {this.state.primes}</p>\r\n        </div>\r\n        <ol style={style.list}>\r\n         {this.Printing()}\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Prime;\r\n","import React from 'react'\r\nimport Prime from './Prime'\r\n\r\nclass Form extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            value: 10\r\n        }\r\n        // this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({\r\n            value: event.target.value\r\n        })\r\n       \r\n        this.forceUpdate();\r\n        //this.props.bob(event.target.value)\r\n    }\r\n\r\n    render(){\r\n        const style = {\r\n            form : {\r\n                height: 300,\r\n                width: 30,\r\n                align: 'center'\r\n            },\r\n            text: {\r\n\r\n            }\r\n        }\r\n        return(\r\n            <div onKeyUp={this.handleChange.bind(this)}>\r\n               <form >\r\n                    <label style={style.form} >\r\n                        Number:\r\n                        <input type=\"number\"  />\r\n                    </label>\r\n                    <div >\r\n                        <Prime val={this.state.value} />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form\r\n","import React, { Component } from 'react';\nimport Prime from './Prime'\nimport Form from './Form'\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      value: 0\n    }\n  }\n\n  gettingInput = (newValue) => {\n    this.setState({\n      value: newValue\n    });\n  }\n  render() {\n    const style = {\n      outerDiv : {\n        top: '300px',\n        left: '300px',\n        height: 900,\n        width: 400,\n        overflow: 'auto',\n        backgroundColor: '#ACA'\n      },\n      innerDiv : {\n        top:'0px',\n        left: '150px',\n        height: 100,\n        width: 400,\n        backgroundColor: 'green'\n      },\n      text: {\n        fontSize: '40px',\n        color: 'black'\n      }\n    }\n    return (\n      <div style={style.outerDiv}>\n          <div style={style.innerDiv}>\n            <p style={style.text}>\n              Prime master 2000\n            </p>\n          <Form />\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}